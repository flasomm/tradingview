//@version=6
indicator("[FS] Time & Cycles", overlay=true)

// === INPUT PARAMETERS ===
defaultColor = color.new(color.blue, 50)

// === PREVIOUS HIGH/LOW ===
show_daily = input.bool(true, "Today", inline="vsettings", group="Previous High/Low")
color_daily = input.color(defaultColor, "", inline="vsettings", group="Previous High/Low")
show_prev_daily = input.bool(true, "D", inline="vsettings", group="Previous High/Low")
color_prev_daily = input.color(defaultColor, "", inline="vsettings", group="Previous High/Low")
show_prev_weekly = input.bool(true, "W", inline="vsettings", group="Previous High/Low")
color_prev_weekly = input.color(defaultColor, "", inline="vsettings", group="Previous High/Low")
show_midnight = input.bool(true, "(00:00)", inline="vsettings", group="Previous High/Low")
color_midnight = input.color(defaultColor, "", inline="vsettings", group="Previous High/Low")

// === DISPLAY ===
show_labels = input.bool(true, "Show Labels", inline="showLabels", group="Previous High/Low")
show_dates = input.bool(false, "Show Dates", inline="showLabels", group="Previous High/Low")

// === HISTORY ===
historyLevels_daily = input.int(2, "History Levels (PDL/PDH)", minval=1, maxval=10, group="Previous High/Low")
historyLevels_weekly = input.int(2, "History Levels (PWL/PWH)", minval=1, maxval=10, group="Previous High/Low")

// === STYLE ===
line_style_opt = input.string("solid", "Line Style", options=["solid", "dashed", "dotted"], group="Previous High/Low")
line_style = line_style_opt == "solid" ? line.style_solid : line_style_opt == "dashed" ? line.style_dashed : line.style_dotted

// === TIMEFRAME DETECTION ===
is_intraday = (timeframe.isminutes and timeframe.multiplier <= 240) or timeframe.isseconds or (timeframe.isintraday and timeframe.multiplier <= 240)
is_daily = timeframe.isdaily
is_weekly = timeframe.isweekly
is_monthly = timeframe.ismonthly

// === ARRAYS ===
var float[] dailyHighs = array.new_float()
var int[] dailyHighBars = array.new_int()
var float[] dailyLows = array.new_float()
var int[] dailyLowBars = array.new_int()
var float[] weeklyHighs = array.new_float()
var int[] weeklyHighBars = array.new_int()
var float[] weeklyLows = array.new_float()
var int[] weeklyLowBars = array.new_int()
var int[] weeklyTimes = array.new_int()

// === LEVELS ACCUMULATION (INLINED) ===
if bar_index == 0
    array.unshift(dailyHighs, high)
    array.unshift(dailyHighBars, bar_index)
    array.unshift(dailyLows, low)
    array.unshift(dailyLowBars, bar_index)
    array.unshift(weeklyHighs, high)
    array.unshift(weeklyHighBars, bar_index)
    array.unshift(weeklyLows, low)
    array.unshift(weeklyLowBars, bar_index)
    array.unshift(weeklyTimes, time)

// === PARAMÈTRES MIDNIGHT ===
var label mnLabel = na

// === DÉTECTION DE LA PREMIÈRE BOUGIE DE LA JOURNÉE UTC ===
var float midnightLow = na
var int midnightBarIdx = na

if ta.change(time("D")) != 0
    midnightLow := low
    midnightBarIdx := bar_index

is_new_day = ta.change(time("D")) != 0
is_new_week = ta.change(time("W")) != 0

if is_new_day
    array.unshift(dailyHighs, high)
    array.unshift(dailyHighBars, bar_index)
    array.unshift(dailyLows, low)
    array.unshift(dailyLowBars, bar_index)
else
    if array.size(dailyHighs) > 0 and high > array.get(dailyHighs, 0)
        array.set(dailyHighs, 0, high)
        array.set(dailyHighBars, 0, bar_index)
    if array.size(dailyLows) > 0 and low < array.get(dailyLows, 0)
        array.set(dailyLows, 0, low)
        array.set(dailyLowBars, 0, bar_index)

if is_new_week
    array.unshift(weeklyHighs, high)
    array.unshift(weeklyHighBars, bar_index)
    array.unshift(weeklyLows, low)
    array.unshift(weeklyLowBars, bar_index)
    array.unshift(weeklyTimes, time)
    if array.size(weeklyHighs) > historyLevels_weekly
        array.pop(weeklyHighs)
        array.pop(weeklyHighBars)
        array.pop(weeklyLows)
        array.pop(weeklyLowBars)
        array.pop(weeklyTimes)
else
    if array.size(weeklyHighs) > 0 and high > array.get(weeklyHighs, 0)
        array.set(weeklyHighs, 0, high)
        array.set(weeklyHighBars, 0, bar_index)
    if array.size(weeklyLows) > 0 and low < array.get(weeklyLows, 0)
        array.set(weeklyLows, 0, low)
        array.set(weeklyLowBars, 0, bar_index)

// === PERSISTENT LINES ===
var line dh_line = na
var line dl_line = na
var line[] pdh_lines = array.new<line>()
var line[] pdl_lines = array.new<line>()

format_date(ts) =>
    m = month(ts)
    d = dayofmonth(ts)
    str.tostring(m, "00") + "/" + str.tostring(d, "00")

// === FIND THE BAR_INDEX OF A HIGH/LOW IN A SESSION ===
find_bar_index_for_value(val, session_start, session_end) =>
    var int idx = na
    tolerance = 0.000001
    max_lookback = math.min(bar_index, 500, bar_index)
    for i = 0 to max_lookback
        if i > bar_index or na(time[i])
            break
        if time[i] >= session_start and time[i] <= session_end and (math.abs(high[i] - val) < tolerance or math.abs(low[i] - val) < tolerance)
            idx := bar_index - i
            break
    idx

// === UTILITY: Plot level if not already used ===
plot_level(used_levels, idx, price, color, style, label_text, yloc, show_line, show_label, offset) =>
    if array.indexof(used_levels, price) == -1 and not na(idx)
        array.push(used_levels, price)
        if show_line
            line.new(idx, price, bar_index, price, xloc.bar_index, extend.right, color, style, 1)
        if show_label
            label_style = yloc == yloc.abovebar ? label.style_label_down : label.style_label_up
            label.new(idx, price, label_text, xloc.bar_index, yloc, color, label_style, color.white, size.tiny)

// === LEVELS AND LINES DISPLAY ===
if barstate.islast
    float[] used_levels = array.new_float()
    if is_intraday
        // --- Midnight ---
        if show_midnight and not na(midnightLow) and not na(midnightBarIdx)
            max_lookback = 1000
            if bar_index - midnightBarIdx <= max_lookback and midnightBarIdx >= 0
                float[] used_levels_mn = array.new_float()
                plot_level(used_levels_mn, midnightBarIdx, midnightLow, color_midnight, line_style, "MN", yloc.belowbar, true, show_labels, 10)
        // --- Weekly levels (PWH/PWL) ---
        if array.size(weeklyHighs) > 0 and array.size(weeklyLows) > 0 and array.size(weeklyTimes) > 0 and show_prev_weekly
            for i = 1 to math.min(historyLevels_weekly, array.size(weeklyHighs) - 1)
                pwh = array.get(weeklyHighs, i)
                pwl = array.get(weeklyLows, i)
                t_w = array.get(weeklyTimes, i)
                session_start_w = array.get(weeklyTimes, i)
                session_end_w = i > 0 ? array.get(weeklyTimes, i - 1) : timenow
                pwh_idx = find_bar_index_for_value(pwh, session_start_w, session_end_w)
                pwl_idx = find_bar_index_for_value(pwl, session_start_w, session_end_w)
                suffix = i > 0 ? "-" + str.tostring(i + 1) : ""
                offset_w = 10 + i * 10
                label_pwh = "PWH" + suffix + (show_dates ? " (" + format_date(t_w) + ")" : "")
                label_pwl = "PWL" + suffix + (show_dates ? " (" + format_date(t_w) + ")" : "")
                if bar_index - pwh_idx <= 500 and pwh_idx >= 0
                    plot_level(used_levels, pwh_idx, pwh, color_prev_weekly, line_style, label_pwh, yloc.abovebar, true, show_labels, offset_w)
                if bar_index - pwl_idx <= 500 and pwl_idx >= 0
                    plot_level(used_levels, pwl_idx, pwl, color_prev_weekly, line_style, label_pwl, yloc.belowbar, true, show_labels, offset_w)
        // --- Daily High/Low (DH/DL) ---
        if array.size(dailyHighs) > 0 and array.size(dailyHighBars) > 0 and array.size(dailyLows) > 0 and array.size(dailyLowBars) > 0
            dh = array.get(dailyHighs, 0)
            dhBar = array.get(dailyHighBars, 0)
            dl = array.get(dailyLows, 0)
            dlBar = array.get(dailyLowBars, 0)
            label_dh = "DH"
            label_dl = "DL"
            if show_daily
                if bar_index - dhBar <= 500 and dhBar >= 0
                    plot_level(used_levels, dhBar, dh, color_daily, line_style, label_dh, yloc.abovebar, true, show_labels, 10)
                if bar_index - dlBar <= 500 and dlBar >= 0
                    plot_level(used_levels, dlBar, dl, color_daily, line_style, label_dl, yloc.belowbar, true, show_labels, 10)
        // --- Previous Daily High/Low (PDH/PDL) ---
        for i = 1 to math.min(historyLevels_daily, array.size(dailyHighs) - 1)
            pdh = array.get(dailyHighs, i)
            pdhBar = array.get(dailyHighBars, i)
            pdl = array.get(dailyLows, i)
            pdlBar = array.get(dailyLowBars, i)
            label_pdh = "PDH" + (i > 1 ? "-" + str.tostring(i) : "")
            label_pdl = "PDL" + (i > 1 ? "-" + str.tostring(i) : "")
            if show_prev_daily
                if bar_index - pdhBar <= 500 and pdhBar >= 0
                    plot_level(used_levels, pdhBar, pdh, color_prev_daily, line_style, label_pdh, yloc.abovebar, true, show_labels, 10)
                if bar_index - pdlBar <= 500 and pdlBar >= 0
                    plot_level(used_levels, pdlBar, pdl, color_prev_daily, line_style, label_pdl, yloc.belowbar, true, show_labels, 10)
        array.clear(used_levels)
    else if is_daily
        // Affichage uniquement PWH/PWL
        if array.size(weeklyHighs) > 0 and array.size(weeklyLows) > 0 and array.size(weeklyTimes) > 0 and show_prev_weekly
            for i = 0 to math.min(historyLevels_weekly, array.size(weeklyHighs) - 1)
                pwh = array.get(weeklyHighs, i)
                pwl = array.get(weeklyLows, i)
                t_w = array.get(weeklyTimes, i)
                session_start_w = array.get(weeklyTimes, i)
                session_end_w = i > 0 ? array.get(weeklyTimes, i - 1) : timenow
                pwh_idx = find_bar_index_for_value(pwh, session_start_w, session_end_w)
                pwl_idx = find_bar_index_for_value(pwl, session_start_w, session_end_w)
                suffix = i > 0 ? "-" + str.tostring(i + 1) : ""
                offset_w = 10 + i * 10
                label_pwh = "PWH" + suffix + (show_dates ? " (" + format_date(t_w) + ")" : "")
                label_pwl = "PWL" + suffix + (show_dates ? " (" + format_date(t_w) + ")" : "")
                if show_labels
                    if bar_index - pwh_idx <= 500 and pwh_idx >= 0
                        plot_level(used_levels, pwh_idx, pwh, color_prev_weekly, line_style, label_pwh, yloc.abovebar, true, show_labels, offset_w)
                    if bar_index - pwl_idx <= 500 and pwl_idx >= 0
                        plot_level(used_levels, pwl_idx, pwl, color_prev_weekly, line_style, label_pwl, yloc.belowbar, true, show_labels, offset_w)
