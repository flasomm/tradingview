//@version=6
indicator("[FS] Time & Cycles", overlay=true, max_bars_back=5000)


// === PREVIOUS HIGH/LOW ===
defaultColor = color.new(color.blue, 50)
input_group_previous_high_low = "Previous High/Low"

display = display.all - display.status_line

show_daily = input.bool(true, "Today", inline="vsettings", group=input_group_previous_high_low, display=display)
color_daily = input.color(color.new(color.red, 50), "", inline="vsettings", group=input_group_previous_high_low, display=display)
show_prev_daily = input.bool(true, "D", inline="vsettings", group=input_group_previous_high_low, display=display)
color_prev_daily = input.color(color.rgb(red = 231, green = 131, blue = 131, transp = 50), "", inline="vsettings", group=input_group_previous_high_low, display=display)
show_prev_weekly = input.bool(true, "W", inline="vsettings", group=input_group_previous_high_low, display=display)
color_prev_weekly = input.color(defaultColor, "", inline="vsettings", group=input_group_previous_high_low, display=display)

// === DISPLAY ===
show_labels = input.bool(true, "Show Labels", inline="showLabels", group="Previous High/Low", display=display)
show_lines = input.bool(true, "Show Lines", inline="showLabels", group="Previous High/Low", display=display)
show_dates = input.bool(false, "Show Dates", inline="showLabels", group="Previous High/Low", display=display)

// === HISTORY ===
historyLevels_daily = input.int(5, "History Levels (PDL/PDH)", minval=1, maxval=10, group="Previous High/Low", display=display)
historyLevels_weekly = input.int(3, "History Levels (PWL/PWH)", minval=1, maxval=10, group="Previous High/Low", display=display)

// === STYLE ===
line_style_opt = input.string("solid", "Line Style", options=["solid", "dashed", "dotted"], group="Previous High/Low", display=display)

// === TIMEFRAME DETECTION ===
is_intraday = (timeframe.isminutes and timeframe.multiplier <= 240) or timeframe.isseconds or (timeframe.isintraday and timeframe.multiplier <= 240)
is_daily = timeframe.isdaily
is_weekly = timeframe.isweekly
is_monthly = timeframe.ismonthly

// === ARRAYS ===
var float[] dailyHighs = array.new_float()
var int[] dailyHighBars = array.new_int()
var float[] dailyLows = array.new_float()
var int[] dailyLowBars = array.new_int()
var float[] weeklyHighs = array.new_float()
var float[] weeklyLows = array.new_float()
var int[] weeklyHighBars = array.new_int()
var int[] weeklyLowBars = array.new_int()
var int[] weeklyTimes = array.new_int()
var int[] dailyTimes = array.new_int()

// === Temporary variables for the current week ===
var float currWeekHigh = na
var float currWeekLow = na
var int currWeekHighBar = na
var int currWeekLowBar = na
var int currWeekTime = na

// === LEVELS ACCUMULATION (INLINED) ===
if bar_index == 0
    array.unshift(dailyHighs, high)
    array.unshift(dailyHighBars, bar_index)
    array.unshift(dailyLows, low)
    array.unshift(dailyLowBars, bar_index)
    array.unshift(weeklyHighs, high)
    array.unshift(weeklyHighBars, bar_index)
    array.unshift(weeklyLows, low)
    array.unshift(weeklyLowBars, bar_index)
    array.unshift(weeklyTimes, time)

is_new_day = ta.change(time("D")) != 0
is_new_week = ta.change(time("W")) != 0

if is_new_day
    array.unshift(dailyHighs, high)
    array.unshift(dailyHighBars, bar_index)
    array.unshift(dailyLows, low)
    array.unshift(dailyLowBars, bar_index)
    array.unshift(dailyTimes, time)
    if array.size(dailyHighs) > historyLevels_daily + 1
        array.pop(dailyHighs)
        array.pop(dailyHighBars)
        array.pop(dailyLows)
        array.pop(dailyLowBars)
        array.pop(dailyTimes)
else
    if array.size(dailyHighs) > 0 and high > array.get(dailyHighs, 0)
        array.set(dailyHighs, 0, high)
        array.set(dailyHighBars, 0, bar_index)
    if array.size(dailyLows) > 0 and low < array.get(dailyLows, 0)
        array.set(dailyLows, 0, low)
        array.set(dailyLowBars, 0, bar_index)

if is_new_week
    if not na(currWeekHigh)
        array.unshift(weeklyHighs, currWeekHigh)
        array.unshift(weeklyHighBars, currWeekHighBar)
        array.unshift(weeklyLows, currWeekLow)
        array.unshift(weeklyLowBars, currWeekLowBar)
        array.unshift(weeklyTimes, currWeekTime)
    currWeekHigh := high
    currWeekLow := low
    currWeekHighBar := bar_index
    currWeekLowBar := bar_index
    currWeekTime := time
else
    if na(currWeekHigh) or high > currWeekHigh
        currWeekHigh := high
        currWeekHighBar := bar_index
        currWeekTime := time
    if na(currWeekLow) or low < currWeekLow
        currWeekLow := low
        currWeekLowBar := bar_index
        currWeekTime := time

// === PERSISTENT LINES ===
var line dh_line = na
var line dl_line = na
var line[] pdh_lines = array.new<line>()
var line[] pdl_lines = array.new<line>()

// === UTILITY: Convert style string to line style ===
get_line_style(style_str) =>
    style_str == "solid" ? line.style_solid : style_str == "dotted" ? line.style_dotted : line.style_dashed

// === UTILITY: Format date ===
format_date(ts) =>
    m = month(ts)
    d = dayofmonth(ts)
    y = year(ts)
    str.tostring(m, "00") + "-" + str.tostring(d, "00")

// === UTILITY: Plot level if not already used ===
plot_level(used_levels, idx, price, color, style, label_text, yloc, show_line, show_label) =>
    max_lookback = 5000
    rel_idx = bar_index - idx
    is_idx_in_buffer = idx >= 0 and idx <= bar_index and rel_idx >= 0 and rel_idx <= max_lookback and not na(close[rel_idx])
    if array.indexof(used_levels, price) == -1 and not na(idx) and is_idx_in_buffer
        array.push(used_levels, price)
        if show_line
            line.new(idx, price, bar_index, price, xloc.bar_index, extend.right, color, style, 1)
        if show_label
            label_style = yloc == yloc.abovebar ? label.style_label_down : label.style_label_up
            label.new(idx, price, label_text, xloc.bar_index, yloc, color, label_style, color.white, size.tiny)

// === Utility function to plot historical levels (high/low) with optional date ===
plot_history_levels(used_levels, highs, highBars, lows, lowBars, color, style, label_prefix, show_labels, yloc_high, yloc_low, max_levels, show_dates, times) =>
    max_idx = math.min(max_levels, array.size(highs) - 1, array.size(highBars) - 1, array.size(lows) - 1, array.size(lowBars) - 1, array.size(times) - 1)
    for i = 1 to max_idx
        h = array.get(highs, i)
        hBar = array.get(highBars, i)
        l = array.get(lows, i)
        lBar = array.get(lowBars, i)
        t = array.get(times, i)
        date_str = show_dates ? " (" + format_date(t) + ")" : ""
        label_h = label_prefix + "H" + (i > 1 ? "-" + str.tostring(i) : "") + date_str
        label_l = label_prefix + "L" + (i > 1 ? "-" + str.tostring(i) : "") + date_str
        if hBar < bar_index
            plot_level(used_levels, hBar, h, color, style, label_h, yloc_high, show_lines, show_labels)
        if lBar < bar_index
            plot_level(used_levels, lBar, l, color, style, label_l, yloc_low, show_lines, show_labels)

// === LEVELS AND LINES DISPLAY ===
if barstate.islast
    float[] used_levels = array.new_float()
    if is_intraday
        // --- Weekly High/Low historiques (PWH/PWL) ---
        if show_prev_weekly and array.size(weeklyHighs) > 1 and array.size(weeklyHighBars) > 1 and array.size(weeklyLows) > 1 and array.size(weeklyLowBars) > 1
            plot_history_levels(used_levels, weeklyHighs, weeklyHighBars, weeklyLows, weeklyLowBars, color_prev_weekly, get_line_style(line_style_opt), "PW", show_labels, yloc.abovebar, yloc.belowbar, historyLevels_weekly, show_dates, weeklyTimes)
        // --- Daily High/Low historiques (PDH/PDL) ---
        if show_prev_daily and array.size(dailyHighs) > 1 and array.size(dailyHighBars) > 1 and array.size(dailyLows) > 1 and array.size(dailyLowBars) > 1 and array.size(dailyTimes) > 1
            plot_history_levels(used_levels, dailyHighs, dailyHighBars, dailyLows, dailyLowBars, color_prev_daily, get_line_style(line_style_opt), "PD", show_labels, yloc.abovebar, yloc.belowbar, historyLevels_daily, show_dates, dailyTimes)
        // --- Daily High/Low du jour courant (DH/DL) ---
        if show_daily and array.size(dailyHighs) > 0 and array.size(dailyHighBars) > 0
            dh = array.get(dailyHighs, 0)
            dhBar = array.get(dailyHighBars, 0)
            dl = array.get(dailyLows, 0)
            dlBar = array.get(dailyLowBars, 0)
            label_dh = "DH"
            label_dl = "DL"
            if dhBar < bar_index and dhBar >= 0 and high != dh
                plot_level(used_levels, dhBar, dh, color_daily, get_line_style(line_style_opt), label_dh, yloc.abovebar, show_lines, show_labels)
            if dlBar < bar_index and dlBar >= 0 and low != dl
                plot_level(used_levels, dlBar, dl, color_daily, get_line_style(line_style_opt), label_dl, yloc.belowbar, show_lines, show_labels)
        array.clear(used_levels)
    else if is_daily
        float[] used_levels = array.new_float()
        if show_prev_weekly and array.size(weeklyHighs) > 1 and array.size(weeklyHighBars) > 1 and array.size(weeklyLows) > 1 and array.size(weeklyLowBars) > 1
            plot_history_levels(used_levels, weeklyHighs, weeklyHighBars, weeklyLows, weeklyLowBars, color_prev_weekly, get_line_style(line_style_opt), "PW", show_labels, yloc.abovebar, yloc.belowbar, historyLevels_weekly, show_dates, weeklyTimes)
        array.clear(used_levels)

// === DAILY CYCLES ===
input_group_daily_cycles = "Daily Cycles"

show_cycle_00 = input.bool(true, "00:00", inline="dailycicle0000", group=input_group_daily_cycles, display=display)
color_cycle_00 = input.color(color.new(color.purple, 0), "", inline="dailycicle0000", group=input_group_daily_cycles, display=display)
style_cycle_00 = input.string("dashed", "", options=["solid", "dashed", "dotted"], inline="dailycicle0000", group=input_group_daily_cycles, display=display)

show_cycle_0930 = input.bool(false, "09:30", inline="dailycicle0930", group=input_group_daily_cycles, display=display)
color_cycle_0930 = input.color(defaultColor, "", inline="dailycicle0930", group=input_group_daily_cycles, display=display)
style_cycle_0930 = input.string("dashed", "", options=["solid", "dashed", "dotted"], inline="dailycicle0930", group=input_group_daily_cycles, display=display)

show_cycle_1530 = input.bool(false, "15:30", inline="dailycicle1530", group=input_group_daily_cycles, display=display)
color_cycle_1530 = input.color(defaultColor, "", inline="dailycicle1530", group=input_group_daily_cycles, display=display)
style_cycle_1530 = input.string("dashed", "", options=["solid", "dashed", "dotted"], inline="dailycicle1530", group=input_group_daily_cycles, display=display)

show_cycle_1600 = input.bool(false, "16:00", inline="dailycicle1600", group=input_group_daily_cycles, display=display)
color_cycle_1600 = input.color(defaultColor, "", inline="dailycicle1600", group=input_group_daily_cycles, display=display)
style_cycle_1600 = input.string("dashed", "", options=["solid", "dashed", "dotted"], inline="dailycicle1600", group=input_group_daily_cycles, display=display)

var float cycle00Low = na
var int cycle00BarIdx = na
var float cycle0930Low = na
var int cycle0930BarIdx = na
var float cycle1530Low = na
var int cycle1530BarIdx = na
var float cycle1600Low = na
var int cycle1600BarIdx = na

is_new_00 = (hour == 0 and minute == 0)
is_new_0930 = (hour == 9 and minute == 30)
is_new_1530 = (hour == 15 and minute == 30)
is_new_1600 = (hour == 16 and minute == 0)

if is_new_00
    cycle00Low := low
    cycle00BarIdx := bar_index
if is_new_0930
    cycle0930Low := low
    cycle0930BarIdx := bar_index
if is_new_1530
    cycle1530Low := low
    cycle1530BarIdx := bar_index
if is_new_1600
    cycle1600Low := low
    cycle1600BarIdx := bar_index

if barstate.islast and is_intraday
    float[] used_levels_cycles = array.new_float()
    if show_cycle_00 and not na(cycle00Low) and not na(cycle00BarIdx)
        plot_level(used_levels_cycles, cycle00BarIdx, cycle00Low, color_cycle_00, get_line_style(style_cycle_00), "00:00", yloc.belowbar, show_lines, show_labels)
    if show_cycle_0930 and not na(cycle0930Low) and not na(cycle0930BarIdx)
        plot_level(used_levels_cycles, cycle0930BarIdx, cycle0930Low, color_cycle_0930, get_line_style(style_cycle_0930), "09:30", yloc.belowbar, show_lines, show_labels)
    if show_cycle_1530 and not na(cycle1530Low) and not na(cycle1530BarIdx)
        plot_level(used_levels_cycles, cycle1530BarIdx, cycle1530Low, color_cycle_1530, get_line_style(style_cycle_1530), "15:30", yloc.belowbar, show_lines, show_labels)
    if show_cycle_1600 and not na(cycle1600Low) and not na(cycle1600BarIdx)
        plot_level(used_levels_cycles, cycle1600BarIdx, cycle1600Low, color_cycle_1600, get_line_style(style_cycle_1600), "16:00", yloc.belowbar, show_lines, show_labels)

// === SESSIONS ===
sessions_group = "Sessions"
sessions_tz = input.string("Europe/Paris", "Sessions Timezone", options=["America/New_York", "America/Chicago", "America/Los_Angeles", "Europe/London", "Europe/Paris", "Europe/Berlin", "Asia/Tokyo", "Asia/Hong_Kong", "Asia/Shanghai", "Asia/Singapore", "Australia/Sydney"], group=sessions_group, tooltip="", display=display)

// London
show_london = input.bool(true, "", inline = "sessions_ldn", group=sessions_group, tooltip="", display=display)
text_london = input.string("LDN", "", inline = "sessions_ldn", group=sessions_group, tooltip="", display=display)
color_london = input.color(color.new(color.red, 50), "", inline="sessions_ldn", group=sessions_group, tooltip="", display=display)
london_session = input.session("0700-1600", "", inline="sessions_ldn", group=sessions_group, display=display)

// New York
show_ny = input.bool(true, "", inline = "sessions_ny", group=sessions_group, tooltip="", display=display)
text_ny = input.string("NY", "", inline = "sessions_ny", group=sessions_group, tooltip="", display=display)
color_ny = input.color(color.new(color.green, 50), "", inline="sessions_ny", group=sessions_group, tooltip="", display=display)
ny_session = input.session("1300-2200", "", inline="sessions_ny", group=sessions_group, display=display)

// Sydney
show_sydney = input.bool(true, "", inline = "sessions_sydney", group=sessions_group, tooltip="", display=display)
text_sydney = input.string("SYD", "", inline = "sessions_sydney", group=sessions_group, tooltip="", display=display)
color_sydney = input.color(color.new(color.blue, 50), "", inline="sessions_sydney", group=sessions_group, tooltip="", display=display)
sydney_session = input.session("2100-0600", "", inline="sessions_sydney", group=sessions_group, display=display)

// Asia
show_asia = input.bool(true, "", inline = "sessions_asia", group=sessions_group, tooltip="", display=display)
text_asia = input.string("ASIA", "", inline = "sessions_asia", group=sessions_group, tooltip="", display=display)
color_asia = input.color(color.new(color.purple, 50), "", inline="sessions_asia", group=sessions_group, tooltip="", display=display)
asia_session = input.session("0000-0900", "", inline="sessions_asia", group=sessions_group, display=display)

// TBD
show_tbd = input.bool(false, "", inline = "sessions_tbd", group=sessions_group, tooltip="", display=display)
text_tbd = input.string("TBD", "", inline = "sessions_tbd", group=sessions_group, tooltip="", display=display)
color_tbd = input.color(color.new(color.purple, 50), "", inline="sessions_tbd", group=sessions_group, tooltip="", display=display)
tbd_session = input.session("0900-1200", "", inline="sessions_tbd", group=sessions_group, display=display)

sessions_border_style = input.string("dotted", "Blocks Border Style", options=["solid", "dashed", "dotted"], inline="sessions_settings", group=sessions_group, display=display)
show_labels_sessions = input.bool(true, "Show Labels", inline="sessions_settings", group=sessions_group, display=display)

// === SESSION BOX UTILITY ===
plot_session_box(show, session_label, color, session, border_style, show_label, prev_box, prev_label, prev_high, prev_low) =>
    start_hour = int(str.tonumber(str.substring(session, 0, 2)))
    start_min  = int(str.tonumber(str.substring(session, 2, 4)))
    end_hour   = int(str.tonumber(str.substring(session, 5, 7)))
    end_min    = int(str.tonumber(str.substring(session, 7, 9)))

    // Convert UTC time to selected timezone
    t = time
    year_ = year(t)
    month_ = month(t)
    day_ = dayofmonth(t)
    hour_ = hour(t)
    minute_ = minute(t)

    // Get timezone offset in hours
    tz_offset = switch sessions_tz
        "America/New_York" => -4
        "America/Chicago" => -5
        "America/Los_Angeles" => -7
        "Europe/London" => 1
        "Europe/Paris" => 2
        "Europe/Berlin" => 2
        "Asia/Tokyo" => 9
        "Asia/Hong_Kong" => 8
        "Asia/Shanghai" => 8
        "Asia/Singapore" => 8
        "Australia/Sydney" => 10
        => 0  // Default to UTC

    // Convert to local time
    local_hour = (hour_ + tz_offset + 24) % 24

    // Calculate current time in minutes since midnight
    current_time_minutes = local_hour * 60 + minute_
    session_start_minutes = start_hour * 60 + start_min
    session_end_minutes = end_hour * 60 + end_min

    // Handle sessions that cross midnight
    var in_session = false
    if session_start_minutes < session_end_minutes
        in_session := current_time_minutes >= session_start_minutes and current_time_minutes < session_end_minutes
    else
        in_session := current_time_minutes >= session_start_minutes or current_time_minutes < session_end_minutes

    box_ = prev_box
    label_ = prev_label
    high_ = prev_high
    low_ = prev_low

    if show
        if not in_session[1] and in_session
            // Start of new session
            high_ := high
            low_ := low
            if not na(box_)
                box.delete(box_)
            box_ := box.new(bar_index, high_, bar_index, low_, bgcolor=color.new(color, 90), border_color=color, border_style=get_line_style(border_style))
            if show_label
                label_x = math.round((box.get_left(box_) + box.get_right(box_)) / 2)
                label_y = (high_ + low_) / 2
                if na(label_)
                    label_ := label.new(x=label_x, y=label_y, text=session_label, xloc=xloc.bar_index, yloc=yloc.price, color=na, style=label.style_label_center, textcolor=color.new(color, 50), size=size.large)
                else
                    label.set_x(label_, label_x)
                    label.set_y(label_, label_y)
        else if in_session
            // During session
            high_ := na(high_) ? high : math.max(high_, high)
            low_ := na(low_) ? low : math.min(low_, low)
            if not na(box_)
                box.set_right(box_, bar_index)
                box.set_top(box_, high_)
                box.set_bottom(box_, low_)
            if show_label and not na(box_)
                label_x = math.round((box.get_left(box_) + box.get_right(box_)) / 2)
                label_y = (high_ + low_) / 2
                if na(label_)
                    label_ := label.new(x=label_x, y=label_y, text=session_label, xloc=xloc.bar_index, yloc=yloc.price, color=na, style=label.style_label_center, textcolor=color.new(color, 50), size=size.large)
                else
                    label.set_x(label_, label_x)
                    label.set_y(label_, label_y)
        else if in_session[1] and not in_session
            // End of session
            if not na(box_)
                box.set_right(box_, bar_index)
                box.set_top(box_, high_)
                box.set_bottom(box_, low_)
            if not na(label_)
                label_x = math.round((box.get_left(box_) + box.get_right(box_)) / 2)
                label_y = (high_ + low_) / 2
                label.set_x(label_, label_x)
                label.set_y(label_, label_y)
            box_ := na
            label_ := na
            high_ := na
            low_ := na
    [box_, label_, high_, low_]

// === LONDON SESSION LOGIC ===
var box london_box = na
var label london_label = na
var float london_high = na
var float london_low = na

[box_new, label_new, high_new, low_new] = plot_session_box(show_london, text_london, color_london, london_session, sessions_border_style, show_labels_sessions, london_box, london_label, london_high, london_low)

london_box := box_new
london_label := label_new
london_high := high_new
london_low := low_new

// === NEW YORK SESSION LOGIC ===
var box ny_box = na
var label ny_label = na
var float ny_high = na
var float ny_low = na

[ny_box_new, ny_label_new, ny_high_new, ny_low_new] = plot_session_box(show_ny, text_ny, color_ny, ny_session, sessions_border_style, show_labels_sessions, ny_box, ny_label, ny_high, ny_low)

ny_box := ny_box_new
ny_label := ny_label_new
ny_high := ny_high_new
ny_low := ny_low_new

// === SYDNEY SESSION LOGIC ===
var box sydney_box = na
var label sydney_label = na
var float sydney_high = na
var float sydney_low = na

[sydney_box_new, sydney_label_new, sydney_high_new, sydney_low_new] = plot_session_box(show_sydney, text_sydney, color_sydney, sydney_session, sessions_border_style, show_labels_sessions, sydney_box, sydney_label, sydney_high, sydney_low)

sydney_box := sydney_box_new
sydney_label := sydney_label_new
sydney_high := sydney_high_new
sydney_low := sydney_low_new

// === ASIA SESSION LOGIC ===
var box asia_box = na
var label asia_label = na
var float asia_high = na
var float asia_low = na

[asia_box_new, asia_label_new, asia_high_new, asia_low_new] = plot_session_box(show_asia, text_asia, color_asia, asia_session, sessions_border_style, show_labels_sessions, asia_box, asia_label, asia_high, asia_low)

asia_box := asia_box_new
asia_label := asia_label_new
asia_high := asia_high_new
asia_low := asia_low_new

// === TBD SESSION LOGIC ===
var box tbd_box = na
var label tbd_label = na
var float tbd_high = na
var float tbd_low = na

[tbd_box_new, tbd_label_new, tbd_high_new, tbd_low_new] = plot_session_box(show_tbd, text_tbd, color_tbd, tbd_session, sessions_border_style, show_labels_sessions, tbd_box, tbd_label, tbd_high, tbd_low)

tbd_box := tbd_box_new
tbd_label := tbd_label_new
tbd_high := tbd_high_new
tbd_low := tbd_low_new
