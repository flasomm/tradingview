//@version=6
indicator("[FS] Time & Cycles", overlay=true)

// === INPUT PARAMETERS ===
defaultColor = color.new(color.white, 50)


// === PREVIOUS HIGH/LOW ===
show_daily = input.bool(true, "Today", inline="vsettings", group="Previous High/Low")
color_daily = input.color(defaultColor, "", inline="vsettings", group="Previous High/Low")
show_prev_daily = input.bool(true, "D", inline="vsettings", group="Previous High/Low")
color_prev_daily = input.color(defaultColor, "", inline="vsettings", group="Previous High/Low")
show_prev_weekly = input.bool(true, "W", inline="vsettings", group="Previous High/Low")
color_prev_weekly = input.color(defaultColor, "", inline="vsettings", group="Previous High/Low")
show_midnight = input.bool(true, "(00:00)", inline="vsettings", group="Previous High/Low")
color_midnight = input.color(color.new(color.purple, 0), "", inline="vsettings", group="Previous High/Low")

// === DISPLAY ===
show_labels = input.bool(true, "Show Labels", inline="showLabels", group="Previous High/Low")
show_dates = input.bool(false, "Show Dates", inline="showLabels", group="Previous High/Low")

// === HISTORY ===
historyLevels_daily = input.int(2, "History Levels (PDL/PDH)", minval=1, maxval=10, group="Previous High/Low")
historyLevels_weekly = input.int(2, "History Levels (PWL/PWH)", minval=1, maxval=10, group="Previous High/Low")

// === STYLE ===
line_style_opt = input.string("solid", "Line Style", options=["solid", "dashed", "dotted"], group="Previous High/Low")
line_style = line_style_opt == "solid" ? line.style_solid : line_style_opt == "dashed" ? line.style_dashed : line.style_dotted

// === TIMEFRAME DETECTION ===
is_intraday = (timeframe.isminutes and timeframe.multiplier <= 240) or timeframe.isseconds or (timeframe.isintraday and timeframe.multiplier <= 240)
is_daily = timeframe.isdaily
is_weekly = timeframe.isweekly
is_monthly = timeframe.ismonthly

// === ARRAYS ===
var float[] dailyHighs = array.new_float()
var float[] dailyLows = array.new_float()
var int[] dailyTimes = array.new_int()
var float[] weeklyHighs = array.new_float()
var float[] weeklyLows = array.new_float()
var int[] weeklyTimes = array.new_int()

// === LEVELS ACCUMULATION (INLINED) ===
if bar_index == 0
    array.unshift(dailyHighs, high)
    array.unshift(dailyLows, low)
    array.unshift(dailyTimes, time)
    array.unshift(weeklyHighs, high)
    array.unshift(weeklyLows, low)
    array.unshift(weeklyTimes, time)

// === PARAMÈTRES MIDNIGHT ===
var label mnLabel = na

// === DÉTECTION DE LA PREMIÈRE BOUGIE DE LA JOURNÉE UTC ===
var float midnightLow = na
var int midnightBarIdx = na

if ta.change(time("D")) != 0
    midnightLow := low
    midnightBarIdx := bar_index

is_new_day = ta.change(time("D")) != 0
is_new_week = ta.change(time("W")) != 0

if is_new_day
    array.unshift(dailyHighs, high)
    array.unshift(dailyLows, low)
    array.unshift(dailyTimes, time)
    if array.size(dailyHighs) > historyLevels_daily + 1
        array.pop(dailyHighs)
        array.pop(dailyLows)
        array.pop(dailyTimes)
else
    if array.size(dailyHighs) > 0
        array.set(dailyHighs, 0, math.max(array.get(dailyHighs, 0), high))
    if array.size(dailyLows) > 0
        array.set(dailyLows, 0, math.min(array.get(dailyLows, 0), low))

if is_new_week
    array.unshift(weeklyHighs, high)
    array.unshift(weeklyLows, low)
    array.unshift(weeklyTimes, time)
    if array.size(weeklyHighs) > historyLevels_weekly
        array.pop(weeklyHighs)
        array.pop(weeklyLows)
        array.pop(weeklyTimes)
else
    if array.size(weeklyHighs) > 0
        array.set(weeklyHighs, 0, math.max(array.get(weeklyHighs, 0), high))
    if array.size(weeklyLows) > 0
        array.set(weeklyLows, 0, math.min(array.get(weeklyLows, 0), low))

// === PERSISTENT LINES ===
var line dh_line = na
var line dl_line = na
var line[] pdh_lines = array.new<line>()
var line[] pdl_lines = array.new<line>()

format_date(ts) =>
    m = month(ts)
    d = dayofmonth(ts)
    str.tostring(m, "00") + "/" + str.tostring(d, "00")

// === FIND THE BAR_INDEX OF A HIGH/LOW IN A SESSION ===
find_bar_index_for_value(val, session_start, session_end) =>
    var int idx = na
    max_lookback = math.min(bar_index, 500, bar_index)
    for i = 0 to max_lookback
        if i > bar_index or na(time[i])
            break
        if time[i] >= session_start and time[i] <= session_end and (high[i] == val or low[i] == val)
            idx := bar_index - i
            break
    idx

delete_lines_array(arr) =>
    if array.size(arr) > 0
        for i = 0 to array.size(arr) - 1
            line.delete(array.get(arr, i))
        array.clear(arr)

draw_level(line ref, x1, y, color, style, label_text, yloc, show_line, show_label, offset) =>
    var line l = ref
    if show_line and not na(x1)
        if not na(l)
            line.delete(l)
        l := line.new(x1=x1, y1=y, x2=bar_index + 1, y2=y, extend=extend.right, color=color, style=style, width=1, xloc=xloc.bar_index)
    if show_line and show_label and not na(x1)
        label.new(x=bar_index + offset, y=y, text=label_text, style=label.style_none, textcolor=color, xloc=xloc.bar_index, yloc=yloc)
        label.new(x=x1, y=y, text=label_text, style=label.style_none, textcolor=color, xloc=xloc.bar_index, yloc=yloc)
    l

add_or_concat_level(prices, labels, price, label) =>
    idx = array.indexof(prices, price)
    if idx != -1
        array.set(labels, idx, array.get(labels, idx) + ", " + label)
    else
        array.push(prices, price)
        array.push(labels, label)

// === UTILITY: Plot level if not already used ===
plot_level(used_levels, idx, price, color, style, label_text, yloc, show_line, show_label, offset) =>
    if array.indexof(used_levels, price) == -1 and not na(idx)
        array.push(used_levels, price)
        if show_line
            line.new(x1=idx, y1=price, x2=bar_index + 1, y2=price, extend=extend.right, color=color, style=style, width=1, xloc=xloc.bar_index)
        if show_label
            label.new(x=bar_index + offset, y=price, text=label_text, style=label.style_none, textcolor=color, xloc=xloc.bar_index, yloc=yloc)
            label.new(x=idx, y=price, text=label_text, style=label.style_none, textcolor=color, xloc=xloc.bar_index, yloc=yloc)

// === LEVELS AND LINES DISPLAY ===
if barstate.islast
    if is_intraday
        float[] used_levels = array.new_float()
        // --- Weekly levels (PWH/PWL) ---
        if array.size(weeklyHighs) > 0 and array.size(weeklyLows) > 0 and array.size(weeklyTimes) > 0 and show_prev_weekly
            for i = 1 to math.min(historyLevels_weekly, array.size(weeklyHighs) - 1)
                pwh = array.get(weeklyHighs, i)
                pwl = array.get(weeklyLows, i)
                t_w = array.get(weeklyTimes, i)
                session_start_w = array.get(weeklyTimes, i)
                session_end_w = i > 0 ? array.get(weeklyTimes, i - 1) : timenow
                pwh_idx = find_bar_index_for_value(pwh, session_start_w, session_end_w)
                pwl_idx = find_bar_index_for_value(pwl, session_start_w, session_end_w)
                suffix = i > 0 ? "-" + str.tostring(i + 1) : ""
                offset_w = 10 + i * 10
                label_pwh = "PWH" + suffix + (show_dates ? " (" + format_date(t_w) + ")" : "")
                label_pwl = "PWL" + suffix + (show_dates ? " (" + format_date(t_w) + ")" : "")
                plot_level(used_levels, pwh_idx, pwh, color_prev_weekly, line_style, label_pwh, yloc.abovebar, true, show_labels, offset_w)
                plot_level(used_levels, pwl_idx, pwl, color_prev_weekly, line_style, label_pwl, yloc.belowbar, true, show_labels, offset_w)
        // --- Daily High/Low (DH/DL) ---
        if array.size(dailyHighs) > 0 and array.size(dailyLows) > 0 and array.size(dailyTimes) > 0
            dh = array.get(dailyHighs, 0)
            dl = array.get(dailyLows, 0)
            t = array.get(dailyTimes, 0)
            session_start = t
            session_end = timenow
            dh_idx = find_bar_index_for_value(dh, session_start, session_end)
            dl_idx = find_bar_index_for_value(dl, session_start, session_end)
            offset = 10
            label_dh = "DH" + (show_dates ? " (" + format_date(t) + ")" : "")
            label_dl = "DL" + (show_dates ? " (" + format_date(t) + ")" : "")
            if show_daily
                plot_level(used_levels, dh_idx, dh, color_daily, line_style, label_dh, yloc.abovebar, true, show_labels, offset)
                plot_level(used_levels, dl_idx, dl, color_daily, line_style, label_dl, yloc.belowbar, true, show_labels, offset)
        // --- Previous Daily High/Low (PDH/PDL) ---
        if array.size(dailyHighs) > 1
            for i = 1 to math.min(historyLevels_daily, array.size(dailyHighs) - 1)
                pdh = array.get(dailyHighs, i)
                pdl = array.get(dailyLows, i)
                t_p = array.get(dailyTimes, i)
                session_start_p = array.get(dailyTimes, i)
                session_end_p = array.get(dailyTimes, i - 1)
                pdh_idx = find_bar_index_for_value(pdh, session_start_p, session_end_p)
                pdl_idx = find_bar_index_for_value(pdl, session_start_p, session_end_p)
                suffix = i > 1 ? "-" + str.tostring(i) : ""
                offset_p = 10 + i * 10
                label_pdh = "PDH" + suffix + (show_dates ? " (" + format_date(t_p) + ")" : "")
                label_pdl = "PDL" + suffix + (show_dates ? " (" + format_date(t_p) + ")" : "")
                if show_prev_daily
                    plot_level(used_levels, pdh_idx, pdh, color_prev_daily, line_style, label_pdh, yloc.abovebar, true, show_labels, offset_p)
                    plot_level(used_levels, pdl_idx, pdl, color_prev_daily, line_style, label_pdl, yloc.belowbar, true, show_labels, offset_p)
        array.clear(used_levels)
    else if is_daily
        // Affichage uniquement PWH/PWL
        if array.size(weeklyHighs) > 0 and array.size(weeklyLows) > 0 and array.size(weeklyTimes) > 0 and show_prev_weekly
            for i = 0 to math.min(historyLevels_weekly, array.size(weeklyHighs) - 1)
                pwh = array.get(weeklyHighs, i)
                pwl = array.get(weeklyLows, i)
                t_w = array.get(weeklyTimes, i)
                session_start_w = array.get(weeklyTimes, i)
                session_end_w = i > 0 ? array.get(weeklyTimes, i - 1) : timenow
                pwh_idx = find_bar_index_for_value(pwh, session_start_w, session_end_w)
                pwl_idx = find_bar_index_for_value(pwl, session_start_w, session_end_w)
                suffix = i > 0 ? "-" + str.tostring(i + 1) : ""
                offset_w = 10 + i * 10
                if not na(pwh_idx)
                    line.new(pwh_idx, pwh, bar_index + 1, pwh, xloc.bar_index, extend.right, color_prev_weekly, line_style, 1)
                    if show_labels
                        label_text = "PWH" + suffix + (show_dates ? " (" + format_date(t_w) + ")" : "")
                        label.new(bar_index + offset_w, pwh, label_text, xloc.bar_index, yloc.abovebar, color_prev_weekly, label.style_none, color.white)
                        label.new(pwh_idx, pwh, label_text, xloc.bar_index, yloc.abovebar, color_prev_weekly, label.style_none, color.white)
                if not na(pwl_idx)
                    line.new(pwl_idx, pwl, bar_index + 1, pwl, xloc.bar_index, extend.right, color_prev_weekly, line_style, 1)
                    if show_labels
                        label_text = "PWL" + suffix + (show_dates ? " (" + format_date(t_w) + ")" : "")
                        label.new(bar_index + offset_w, pwl, label_text, xloc.bar_index, yloc.belowbar, color_prev_weekly, label.style_none, color.white)
                        label.new(pwl_idx, pwl, label_text, xloc.bar_index, yloc.belowbar, color_prev_weekly, label.style_none, color.white)

// === AFFICHAGE LIGNE ET LABEL MN ===
if barstate.islast and show_midnight and not na(midnightLow) and not na(midnightBarIdx)
    line.new(midnightBarIdx, midnightLow, bar_index, midnightLow, xloc.bar_index, extend.right, color_midnight, line_style, 1)
    if show_labels
        if not na(mnLabel)
            label.delete(mnLabel)
        mnLabel := label.new(midnightBarIdx, midnightLow, "MN", xloc.bar_index, yloc.belowbar, color_midnight, label.style_label_up, color.white, size.tiny)
